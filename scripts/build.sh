#!/bin/bash

# BitForward - Build Script
# Optimiza y construye la aplicaci√≥n para producci√≥n

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
echo -e "${PURPLE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                          ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïë
‚ïë                                                          ‚ïë
‚ïë              Production Build System v3.0               ‚ïë
‚ïë                    by AFORTU                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Step 1: Clean previous builds
echo -e "${BLUE}[1/7] üßπ Cleaning previous builds...${NC}"
rm -rf dist
rm -rf dist-legacy
rm -rf .vite
echo -e "${GREEN}‚úì Clean completed${NC}\n"

# Step 2: Check dependencies
echo -e "${BLUE}[2/7] üì¶ Checking dependencies...${NC}"
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}‚ö† node_modules not found, running npm install...${NC}"
    npm install
fi
echo -e "${GREEN}‚úì Dependencies OK${NC}\n"

# Step 3: Run tests
echo -e "${BLUE}[3/7] üß™ Running tests...${NC}"
if command -v npm &> /dev/null; then
    npm test -- --passWithNoTests || {
        echo -e "${YELLOW}‚ö† Tests failed or not found, continuing...${NC}"
    }
fi
echo -e "${GREEN}‚úì Tests completed${NC}\n"

# Step 4: Optimize images
echo -e "${BLUE}[4/7] üñºÔ∏è  Optimizing images...${NC}"
if [ -f "scripts/optimize-images.js" ]; then
    node scripts/optimize-images.js || {
        echo -e "${YELLOW}‚ö† Image optimization skipped${NC}"
    }
else
    echo -e "${YELLOW}‚ö† Image optimizer not found, skipping...${NC}"
fi
echo -e "${GREEN}‚úì Image optimization completed${NC}\n"

# Step 5: Build with Vite
echo -e "${BLUE}[5/7] üèóÔ∏è  Building application...${NC}"
NODE_ENV=production npm run build

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úì Build successful${NC}\n"
else
    echo -e "${RED}‚úó Build failed${NC}"
    exit 1
fi

# Step 6: Analyze bundle size
echo -e "${BLUE}[6/7] üìä Analyzing bundle size...${NC}"
if [ -f "dist/stats.html" ]; then
    echo -e "${GREEN}‚úì Bundle analysis saved to dist/stats.html${NC}"
    
    # Calculate total size
    TOTAL_SIZE=$(du -sh dist | cut -f1)
    echo -e "${CYAN}üì¶ Total bundle size: ${TOTAL_SIZE}${NC}"
    
    # Count files
    FILE_COUNT=$(find dist -type f | wc -l)
    echo -e "${CYAN}üìÑ Total files: ${FILE_COUNT}${NC}"
    
    # Gzip size
    if [ -d "dist/js" ]; then
        GZIP_SIZE=$(find dist/js -name "*.gz" | xargs du -ch | tail -1 | cut -f1)
        echo -e "${CYAN}üóúÔ∏è  Gzip size: ${GZIP_SIZE}${NC}"
    fi
else
    echo -e "${YELLOW}‚ö† Bundle analysis not available${NC}"
fi
echo ""

# Step 7: Generate build report
echo -e "${BLUE}[7/7] üìù Generating build report...${NC}"
BUILD_TIME=$(date "+%Y-%m-%d %H:%M:%S")
BUILD_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

cat > dist/BUILD_INFO.txt << EOF
BitForward - Build Information
================================

Build Time: ${BUILD_TIME}
Git Commit: ${BUILD_HASH}
Node Version: $(node --version)
NPM Version: $(npm --version)

Build Configuration:
- Environment: production
- Minification: Terser
- Compression: Gzip + Brotli
- Tree Shaking: Enabled
- Source Maps: Disabled

Performance Targets:
- Bundle Size: < 250KB (gzipped)
- First Paint: < 0.8s
- Time to Interactive: < 1.5s
- Lighthouse Score: > 95

Bundle Analysis:
- Total Size: ${TOTAL_SIZE}
- File Count: ${FILE_COUNT}
- Gzip Size: ${GZIP_SIZE:-N/A}

Generated by: BitForward Build System v3.0
EOF

echo -e "${GREEN}‚úì Build report saved to dist/BUILD_INFO.txt${NC}\n"

# Success banner
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                          ‚ïë
‚ïë                  ‚úÖ BUILD SUCCESSFUL! üöÄ                 ‚ïë
‚ïë                                                          ‚ïë
‚ïë  Your optimized production build is ready in ./dist     ‚ïë
‚ïë                                                          ‚ïë
‚ïë  Next steps:                                            ‚ïë
‚ïë  ‚Ä¢ npm run preview - Test production build locally      ‚ïë
‚ïë  ‚Ä¢ npm run analyze - View bundle analysis               ‚ïë
‚ïë  ‚Ä¢ Deploy to your hosting service                       ‚ïë
‚ïë                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Performance tips
echo -e "${CYAN}üí° Performance Tips:${NC}"
echo -e "  ‚Ä¢ Enable CDN for static assets"
echo -e "  ‚Ä¢ Configure HTTP/2 or HTTP/3"
echo -e "  ‚Ä¢ Set proper cache headers"
echo -e "  ‚Ä¢ Enable Brotli compression on server"
echo -e "  ‚Ä¢ Use preconnect for external APIs\n"

echo -e "${PURPLE}üéØ To test the build locally:${NC}"
echo -e "${YELLOW}   npm run preview${NC}\n"

exit 0
